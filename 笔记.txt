1、JavaScript是客户端和服务端的脚本语言，可以嵌入到HTML中，是比较热门的web开发语言。同时也是面向对象编程语言。

2、JavaScript基本类型有： 数据类型：string，number，boolean,null,undefined,array,object

3、JavaScript发布者布兰登・艾克

4.你如何对网站的文件和资源进行优化？
期待的解决方案包括：文件合并文件最小化/文件压缩使用CDN托管缓存的使用（多个域名来提供缓存)

---------------------------------------------------------
5.请说出三种减少页面加载时间的方法。（加载时间指感知的时间或者实际加载时间）
1.优化图片

2.图像格式的选择（GIF：提供的颜色较少，可用在一些对颜色要求不高的地方）

3.优化CSS（压缩合并css，如margin-top,margin-left…)

4.网址后加斜杠（如www.campr.com/目录，会判断这个“目录是什么文件类型，或者是目录。）

5.标明高度和宽度（如果浏览器没有找到这两个参数，它需要一边下载图片一边计算大小，如果图片很多，浏览器需要不断地调整页面。这不但影响速度，也影响浏览体验。当浏览器知道了高度和宽度参数后，即使图片暂时无法显示，页面上也会腾出图片的空位，然后继续加载后面的内容。从而加载时间快了，浏览体验也更好了。）

6.减少http请求（合并文件，合并图片）。

---------------------------------------------------------
http请求过程
1、域名解析
2、发起TCP的三次握手
3、建立起TCP连接后发起HTTP请求
4、服务端响应HTTP请求，向浏览器得到HTML代码
5、浏览器解析HTML代码，请求HTML代码中的资源
6、浏览器对页面进行渲染呈现给用户
---------------------------------------------------------
基本数据类型： string number null undefine boolean
parseInt() 将任何值转换成整数输出，失败返回NAN

---------------------------------------------------------

二叉树排序：
冒泡排序
闭包
---------------------------------------------------------
作用域链：
当JavaScript执行一段代码块的时候，就会创建一个作用域，又称为执行上下文。在页面加载完毕后首先会创建一个全局作用域，然后每执行一个函数，就会创建对应的一个作用域，每个作用域都有对应的作用域链。
作用： 用来解析标识符
---------------------------------------------------------
原型链：
JavaScript每个对象都有一个prototype属性，称之为原型。原型的值是一个对象，而这些对象又有自己的原型，形成了一个原型链。原型链的头是object
继承： 
	function Parent(name, age) {
			this.name = name;
			this.age = age;
		}
		Parent.prototype.Child = function() {
			alert(this.name + this.age)
		}

		var obj = new Parent('zhangsan', 10)
		alert(obj.name)
		alert(obj.age)
如何查找构造函数和原型中的属性？
构造函数.prototype 查看构造函数的原型属性
实例对象 .__proto__查看实例对象的构造函数的原型
实例对象.proto.constructor查看实例对象的构造函数
---------------------------------------------------------

强制类型转换：
parentInt() parentFloat() number
种隐式类型转换: == ===
---------------------------------------------------------
ajax请求的时候get和post方式的区别
一个在url后面 一个放在虚拟载体里面
有大小限制
安全问题
应用不同：一个是论坛等只需要请求的，一个是类似需改 密码的

---------------------------------------------------------

IE下的标准有哪些兼容性的写法
var ev = ev || window.ev
document.document.documentElement.clientWidth || document.body.clientWidth
var target = ev.target || ev.srcElement
---------------------------------------------------------


DOM怎样添加、移动、复制、创建和查找节点
// 创建新节点
createDocumentFragment()    //创建一个DOM片段
createElement()   //创建一个具体的元素
createTextNode()   //创建一个文本节点
// 添加、移除、替换、插入
appendChild()
removeChild()
replaceChild()
insertBefore() //在已有的子节点前插入一个新的子节点
// 查找
getElementsByTagName()    //通过标签名称
getElementsByName()    //通过元素的Name属性的值(IE容错能力较强，会得到一个数组，其中包括id等于name值的)
getElementById()    //通过元素Id，唯一性

---------------------------------------------------------
如何阻止事件冒泡和默认事件
function stopBubble(e)
{
    if (e && e.stopPropagation)
        e.stopPropagation()
    else
        window.event.cancelBubble=true
}
return false
---------------------------------------------------------
jsonp跨域：
只要协议、域名、端口有任何一个不同，都被当作是不同的域。
通过script标签引入一个js文件，这个js文件载入成功后会执行我们在url参数中指定的函数，并且会把我们需要的json数据作为参数传入。所以jsonp是需要服务器端的页面进行相应的配合的。
---------------------------------------------------------
本地存储
---------------------------------------------------------
去重
var arr = [12,12,15,45,45,56,23,16]
		var arr2 = []
		function de_weight(arr) {
			for (var i = 0; i < arr.length; i++) {
				if (arr2.indexOf(arr[i]) < 0) {
					arr2.push(arr[i])
				}
			}
			return arr2
		}
		
		console.log(de_weight(arr))

---------------------------------------------------
		GET和POST的区别，何时使用POST？
GET：一般用于信息获取，使用URL传递参数，对发送信息的数量也有限制，一般在2000个字符
POST：一般用于修改服务器上的资源，对发送的信息没有限制
GET方式需要使用Request.QueryString来获取变量的值，而POST方式通过R额quest.Form来获取变量的值，也就是说GET是通过地址栏传值，而Post是通过提交表单来传值。
然而，在以下情况中，请使用POST请求：
无法使用缓存文件（更新服务器上的文件或数据库）
向服务器发送大量数据（POST没有数据量限制）
发送包含未知字符的用户输入时，POST比GET更稳定也更可靠
35、Falsh、Ajax各自的优缺点，在使用中如何取舍？
Falsh适合处理多媒体，矢量图形、访问机器；对css、处理文本上不足，不容易被搜索。
Ajax对css、文本支持很好、支持搜索；多媒体、矢量图形、机器访问不足。
共同点：与服务器的无刷新传递消息、用户离线和在线状态，操作DOM
36、ajax过程
1、创建XMLHttpRequest对象，也就是创建一个异步调用对象。
2、创建一个新的HTTP请求，并指想向该HTTP请求的方法、URL及验证信息。
3、设置响应HTTP请求状态变化的函数。
4、发送HTTP请求。
5、获取异步调用返回的数据。
6、使用JavaScript和DOM实现局部刷新。
js延迟加载的方式有哪些？
defer和async，动态创建DOM方式（用得最多），按需异步载入js
如何解决跨越问题？
jsonp,iframe,window.name,window.postMessage
new操作符具体干了什么呢？
1.创建了一个空对象，并且this变量引用该对象，同时还继承了该函数的原型。
2.属性和方法被加入到this引用的对象中。
3.新创建的对象由this所引用，并且最后隐式的返回this。

var obj={};
obj.__proto__=Base.prototype;
Base.call(obj);
面向对象和类的区别？
简单的说类是对象的模板。
在js中没有类，所以在js中所谓的类就是构造函数，对象就是有构造函数创建出来的实例对象。面向对象就是使用面向对象的方式处理问题，面向对象是向过程进行封装。
对象的概念，面向对象编程的程序实际就是多个对象的集合，我们可以把所有的事物都抽象成对象，在程序设计中可以看作：对象=属性+方法。属性就是对象的数据，而方法就是对象的行为
类的概念，类是对象的模板，而对象是类的实例化。举个例子，汽车设计图可以看作是类，而具体的汽车就是对象。再比如有一个类是表示人，然后可以通过人这个模板来实例化出张三，李四...
面向对象有三大特性
抽象性，需要通过核心数据和特定环境才能描述对象的具体意义
封装性，封装就是讲数据和功能组合到一起，在js中对象就是键值对的集合，对象将属性和方法封装起来，方法将过程封装起来
继承性，将别人的属性的方法成为自己的，传统继承基于模板（类），js中继承基于构造函数
在js的计时器运行原理是怎样的，为什么可以触发计时器效果？计时器是多线程吗？
1.JavaScript引擎只有一个线程，强迫异步事件排队等待被执行。
2.setTimeout和setInterval本质上不同的地方是他们如何执行异步代码的。
3.如果一个定时器正在执行的时候被阻塞了，那么它将会被推迟到下一个可能的执行点，这既是使得延迟时间有可能会超过声明定时器时设置的值。
Interval如果有足够的时间来执行（大于指定的延迟），那么它将会无延迟的一个紧接着一个执行。
原理
计时器通过设定一定的时间段（毫秒）来异步的执行一段代码。因为JavaScript是一个单线程，计时器提供了一种绕过这种语言限制来执行代码的能力。
总结：
计时器是单线程的，需要等待上一个执行完，如果上一个没有执行完，下一个需要延迟执行，直到上一个执行完

-------------------------------------------------------------------------

1、HTTP 1.1支持长连接（PersistentConnection）和请求的流水线（Pipelining）处理

HTTP 1.0规定浏览器与服务器只保持短暂的连接，浏览器的每次请求都需要与服务器建立一个TCP连接，
服务器完成请求处理后立即断开TCP连接，服务器不跟踪每个客户也不记录过去的请求。
2.HTTP 1.1请求消息和响应消息都应支持Host头域，增加host字段
3、HTTP/1.1加入了一个新的状态码100（Continue）
4、HTTP/1.1中引入了Chunked transfer-coding来解决上面这个问题
5、HTTP/1.1在1.0的基础上加入了一些cache的新特性，当缓存对象的Age超过Expire时变为stale对象，
cache不需要直接抛弃stale对象，而是与源服务器进行重新激活（revalidation）。
-------------------------------------------------------------------------
ES6和ES7有哪些新特性：
let const声明的变量
块级作用域
解构赋值： 变量名需与属性同名
字符串的扩展： 
includes(),startsWith(),endsWith() 
includes(): 布尔值。是否包含该字符串
srtartsWith():布尔值。是否在原字符串的头部
endsWith():布尔值。是都在原字符串的尾部
ES6合并两个数组： [...a, ...b]使用扩展运算符
对象的扩展
Object.keys() Object.values() Object.entries() 
Object.keys，返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历属性的键名。
Object.values，返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历属性的键值。
Object.entries，返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历属性的键值对数组。
let {keys, values, entries} = Object;
let obj = { a: 1, b: 2, c: 3 };
for (let key of keys(obj)) {
  console.log(key); // 'a', 'b', 'c'
}
for (let value of values(obj)) {
  console.log(value); // 1, 2, 3
}
for (let [key, value] of entries(obj)) {
  console.log([key, value]); // ['a', 1], ['b', 2], ['c', 3]
}
-------------------------------------------------------------------------
NodeJS开发中常用的一些模块。

MVC框架 - Express
Rest开发 - Restify
前端模板 - EJS
数据库驱动 - Mongoose
Web Socket - Socket.IO
日志管理 - Log4js
HTTP调用 Request
异步流程控制 - Async
部署 - forever
定时任务 - Cron
-------------------------------------------------------------------------
webpack的打包流程
一. 安装

我们常规直接使用 npm 的形式来安装：

$ npm install webpack -g

当然如果常规项目还是把依赖写入 package.json 包去更人性化：

$ npm init
$ npm install webpack --save-dev

 

二. 配置

每个项目下都必须配置有一个 webpack.config.js ，它的作用如同常规的 gulpfile.js/Gruntfile.js ，就是一个配置项，告诉 webpack 它需要做什么。

我们看看下方的示例：

var webpack = require('webpack');
var commonsPlugin = new webpack.optimize.CommonsChunkPlugin('common.js');

module.exports = {
    //插件项
    plugins: [commonsPlugin],
    //页面入口文件配置
    entry: {
        index : './src/js/page/index.js'
    },
    //入口文件输出配置
    output: {
        path: 'dist/js/page',
        filename: '[name].js'
    },
    module: {
        //加载器配置
        loaders: [
            { test: /\.css$/, loader: 'style-loader!css-loader' },
            { test: /\.js$/, loader: 'jsx-loader?harmony' },
            { test: /\.scss$/, loader: 'style!css!sass?sourceMap'},
            { test: /\.(png|jpg)$/, loader: 'url-loader?limit=8192'}
        ]
    },
    //其它解决方案配置
    resolve: {
        root: 'E:/github/flux-example/src', //绝对路径
        extensions: ['', '.js', '.json', '.scss'],
        alias: {
            AppStore : 'js/stores/AppStores.js',
            ActionType : 'js/actions/ActionType.js',
            AppAction : 'js/actions/AppAction.js'
        }
    }
};
⑴ plugins 是插件项，这里我们使用了一个 CommonsChunkPlugin 的插件，它用于提取多个入口文件的公共脚本部分，然后生成一个 common.js 来方便多页面之间进行复用。

⑵ entry 是页面入口文件配置，output 是对应输出项配置（即入口文件最终要生成什么名字的文件、存放到哪里），其语法大致为：

{
    entry: {
        page1: "./page1",
        //支持数组形式，将加载数组中的所有模块，但以最后一个模块作为输出
        page2: ["./entry1", "./entry2"]
    },
    output: {
        path: "dist/js/page",
        filename: "[name].bundle.js"
    }
}
该段代码最终会生成一个 page1.bundle.js 和 page2.bundle.js，并存放到 ./dist/js/page 文件夹下。

⑶ module.loaders 是最关键的一块配置。它告知 webpack 每一种文件都需要使用什么加载器来处理：

    module: {
        //加载器配置
        loaders: [
            //.css 文件使用 style-loader 和 css-loader 来处理
            { test: /\.css$/, loader: 'style-loader!css-loader' },
            //.js 文件使用 jsx-loader 来编译处理
            { test: /\.js$/, loader: 'jsx-loader?harmony' },
            //.scss 文件使用 style-loader、css-loader 和 sass-loader 来编译处理
            { test: /\.scss$/, loader: 'style!css!sass?sourceMap'},
            //图片文件使用 url-loader 来处理，小于8kb的直接转为base64
            { test: /\.(png|jpg)$/, loader: 'url-loader?limit=8192'}
        ]
    }
如上，"-loader"其实是可以省略不写的，多个loader之间用“!”连接起来。

注意所有的加载器都需要通过 npm 来加载，并建议查阅它们对应的 readme 来看看如何使用。

拿最后一个 url-loader 来说，它会将样式中引用到的图片转为模块来处理，使用该加载器需要先进行安装：

npm install url-loader -save-dev

配置信息的参数“?limit=8192”表示将所有小于8kb的图片都转为base64形式（其实应该说超过8kb的才使用 url-loader 来映射到文件，否则转为data url形式）。

⑷ 最后是 resolve 配置，这块很好理解，直接写注释了：

    resolve: {
        //查找module的话从这里开始查找
        root: 'E:/github/flux-example/src', //绝对路径
        //自动扩展文件后缀名，意味着我们require模块可以省略不写后缀名
        extensions: ['', '.js', '.json', '.scss'],
        //模块别名定义，方便后续直接引用别名，无须多写长长的地址
        alias: {
            AppStore : 'js/stores/AppStores.js',//后续直接 require('AppStore') 即可
            ActionType : 'js/actions/ActionType.js',
            AppAction : 'js/actions/AppAction.js'
        }
    }
关于 webpack.config.js 更详尽的配置可以参考这里。



运行 webpack

webpack 的执行也很简单，直接执行

$ webpack --display-error-details

即可，后面的参数“--display-error-details”是推荐加上的，方便出错时能查阅更详尽的信息（比如 webpack 寻找模块的过程），从而更好定位到问题。

其他主要的参数有：

$ webpack --config XXX.js   //使用另一份配置文件（比如webpack.config2.js）来打包

$ webpack --watch   //监听变动并自动打包

$ webpack -p    //压缩混淆脚本，这个非常非常重要！

$ webpack -d    //生成map映射文件，告知哪些模块被最终打包到哪里了
其中的 -p 是很重要的参数，曾经一个未压缩的 700kb 的文件，压缩后直接降到 180kb（主要是样式这块一句就独占一行脚本，导致未压缩脚本变得很大）。



模块引入

上面唠嗑了那么多配置和执行方法，下面开始说说寻常页面和脚本怎么使用呗。

一. HTML

直接在页面引入 webpack 最终生成的页面脚本即可，不用再写什么 data-main 或 seajs.use 了：

<!DOCTYPE html>
<html>
<head lang="en">
  <meta charset="UTF-8">
  <title>demo</title>
</head>
<body>
  <script src="dist/js/page/common.js"></script>
  <script src="dist/js/page/index.js"></script>
</body>
</html>
可以看到我们连样式都不用引入，毕竟脚本执行时会动态生成<style>并标签打到head里。

二. JS

各脚本模块可以直接使用 commonJS 来书写，并可以直接引入未经编译的模块，比如 JSX、sass、coffee等（只要你在 webpack.config.js 里配置好了对应的加载器）。

我们再看看编译前的页面入口文件（index.js）：

require('../../css/reset.scss'); //加载初始化样式
require('../../css/allComponent.scss'); //加载组件样式
var React = require('react');
var AppWrap = require('../component/AppWrap'); //加载组件
var createRedux = require('redux').createRedux;
var Provider = require('redux/react').Provider;
var stores = require('AppStore');

var redux = createRedux(stores);

var App = React.createClass({
    render: function() {
        return (
            <Provider redux={redux}>
                {function() { return <AppWrap />; }}
            </Provider>
        );
    }
});

React.render(
    <App />, document.body
);
一切就是这么简单么么哒~ 后续各种有的没的，webpack 都会帮你进行处理。



其他

至此我们已经基本上手了 webpack 的使用，下面是补充一些有用的技巧。

一. shimming

在 AMD/CMD 中，我们需要对不符合规范的模块（比如一些直接返回全局变量的插件）进行 shim 处理，这时候我们需要使用 exports-loader 来帮忙：

{ test: require.resolve("./src/js/tool/swipe.js"),  loader: "exports?swipe"}
之后在脚本中需要引用该模块的时候，这么简单地来使用就可以了：

require('./tool/swipe.js');
swipe(); 


二. 自定义公共模块提取

在文章开始我们使用了 CommonsChunkPlugin 插件来提取多个页面之间的公共模块，并将该模块打包为 common.js 。

但有时候我们希望能更加个性化一些，我们可以这样配置：

var CommonsChunkPlugin = require("webpack/lib/optimize/CommonsChunkPlugin");
module.exports = {
    entry: {
        p1: "./page1",
        p2: "./page2",
        p3: "./page3",
        ap1: "./admin/page1",
        ap2: "./admin/page2"
    },
    output: {
        filename: "[name].js"
    },
    plugins: [
        new CommonsChunkPlugin("admin-commons.js", ["ap1", "ap2"]),
        new CommonsChunkPlugin("commons.js", ["p1", "p2", "admin-commons.js"])
    ]
};
// <script>s required:
// page1.html: commons.js, p1.js
// page2.html: commons.js, p2.js
// page3.html: p3.js
// admin-page1.html: commons.js, admin-commons.js, ap1.js
// admin-page2.html: commons.js, admin-commons.js, ap2.js


三. 独立打包样式文件

有时候可能希望项目的样式能不要被打包到脚本中，而是独立出来作为.css，然后在页面中以<link>标签引入。这时候我们需要 extract-text-webpack-plugin 来帮忙：

    var webpack = require('webpack');
    var commonsPlugin = new webpack.optimize.CommonsChunkPlugin('common.js');
    var ExtractTextPlugin = require("extract-text-webpack-plugin");

    module.exports = {
        plugins: [commonsPlugin, new ExtractTextPlugin("[name].css")],
        entry: {
        //...省略其它配置

-------------------------------------------------------------------------
vue单页面应用：
 单页面应用指一个系统只加载一次资源，然后下面的操作交互、数据交互是通过router、ajax来进行，页面并没有刷新；
 单页面的应用优点：

  1.分离前后端关注点，前端负责界面显示，后端负责数据存储和计算。不会把前后端的逻辑混杂在一起；

  2.减轻服务器压力，服务器只用出数据就可以；

  3.同一套后端程序代码，不用修改就可以用于Web界面、手机、平板等多种客户端；

  4.用户体验好、快，内容的改变不需要重新加载整个页面，web应用更具响应性和更令人着迷；
 
  5.SPA和RESTful架构一起使用，后端不再负责模板渲染、输出页面工作，web前端和各种移动终端地位对等，后端API通用化；
-------------------------------------------------------------------------
减少http请求;
1. 图片：雪碧图，图标字体文件，data:url
2. 合并JS和CSS文件 利用项目构建工具，如gulp, grunt, webpack等等，都可以做到JS或者CSS文件的压缩，
3.使用外部JS和CSS文件
--------------------------------------------------------------------------
javascript延迟加载：
1. defer 属性
HTML 4.01 为 <script>标签定义了 defer属性。 
用途：表明脚本在执行时不会影响页面的构造。也就是说，脚本会被延迟到整个页面都解析完毕之后再执行。

在<script> 元素中设置 defer 属性，等于告诉浏览器立即下载，但延迟执行。

2. async 属性
HTML5 为 <script>标签定义了 async属性。与defer属性类似，都用于改变处理脚本的行为。同样，只适用于外部脚本文件。 
3.动态创建DOM方式

4.使用jQuery的getScript()方法
$.getScript("outer.js",function(){//回调函数，成功获取文件后执行的函数  
      console.log("脚本加载完成")  
});

-------------------------------------------------------------------------
CSS 选择符：
1)      id选择器(# myid)

2)      类选择器(.myclassname)

3)      标签选择器(div, h1, p)

4)      相邻选择器(h1 + p)

5)      子选择器(ul > li)

6)      后代选择器(li a)

7)      通配符选择器( * )

8)      属性选择器(a[rel = "external"])

9)      伪类选择器(a: hover, li:nth-child)

可继承的样式：
1)      font-size

2)      font-family

3)      color

4)      text-indent

不可继承的样式：
1)      border

2)      padding

3)      margin

4)      width

5)      height

优先级算法：
1)      优先级就近原则，同权重情况下样式定义最近者为准;

2)      载入样式以最后载入的定位为准;

3)      3.!important >  id > class > tag  

4)      important 比 内联优先级高，但内联比 id 要高

CSS3新增伪类举例：
1)      p:first-of-type  选择属于其父元素的首个 <p> 元素的每个 <p> 元素。

2)      p:last-of-type   选择属于其父元素的最后 <p> 元素的每个 <p> 元素。

3)      p:only-of-type  选择属于其父元素唯一的 <p> 元素的每个 <p> 元素。

4)      p:only-child     选择属于其父元素的唯一子元素的每个 <p> 元素。

5)      p:nth-child(2)  选择属于其父元素的第二个子元素的每个 <p> 元素。

6)      :enabled :disabled 控制表单控件的禁用状态。

7)      :checked         单选框或复选框被选中。

CSS3有哪些新特性？
1)    CSS3实现圆角（border-radius），阴影（box-shadow），

2)    对文字加特效（text-shadow、），线性渐变（gradient），旋转（transform）

3)    transform:rotate(9deg) scale(0.85,0.90) translate(0px,-30px) skew(-9deg,0deg);// 旋转,缩放,定位,倾斜

4)    增加了更多的CSS选择器  多背景 rgba 

5)    在CSS3中唯一引入的伪元素是 ::selection.

6)    媒体查询，多栏布局

7)    border-image
-----------------------------------------------------------------------
箭头函数和普通函数的区别：
1、箭头函数是一个匿名函数，不能作为构造函数，不能使用new
2、只有一条返回语句的时候，可以省略return
3、箭头函数不绑定this，this指的是上下文，而普通函数this指的是当前对象
4、箭头函数不绑定arguments，取而代之用rest参数...解决
5、箭头函数通过 call()  或   apply() 方法调用一个函数时，只传入了一个参数，对 this 并没有影响。
6、箭头函数没有原型属性
7、箭头函数不能当做Generator函数,不能使用yield关键字
-----------------------------------------------------------------------
vue 中 v-if 和 v-show 的区别
一、v-if 和 v-show 在页面都展示为显示隐藏，但是它两有这本质的区别。 
例如：<div v-if=""></div> 
不同点：

1 . v-if 当值为 true时，显示div ，当值为false时，该元素消失，代码也会消失，相当于将代码删除了，当在为true时，页面会重新渲染div; 
而v-show 控制的隐藏出现，只是将css属性设为了display：none 或block;
-----------------------------------------------------------------------

Vue和React的区别：
主要区别：
模板 vs JSX
状态管理 vs 对象属性
construtor() //创建组件
componentWillMount() //组件挂载之前
componentDidMount() // 组件挂载之后
componentWillReceiveProps() // 父组件发生render的时候子组件调用该函数
shouldComponentUpdate() // 组件挂载之后每次调用setState后都会调用该函数判断是否需要重新渲染组件，默认返回true
componentDidUpdate() // 更新
render() //渲染，react中的核心函数
componentWillUnmount() //组件被卸载的时候调用，一般在componentDidMount注册的事件需要在这里删除


相似之处：
组件化，双向数据绑定
构建工具
react没有数据双向绑定，单向流